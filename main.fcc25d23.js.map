{"version":3,"sources":["scripts/main.js"],"names":["newCellCoord","fieldCells","document","querySelectorAll","pointsScrean","querySelector","startButton","getRandom","max","Math","floor","random","isNoSlide","array","every","item","transpose","arr","map","_","i","setStates","reverse","transposed","isStates","newBoard","Array","fill","board","slice","isWin","boardCheck","scores","direction","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","winPromise","Promise","resolve","addEventListener","slideResult","arrayCheck","row","merge","filter","newArr","length","splice","reduce","a","b","push","result","flat","slideBoard","newCell","empty","renderCells","forEach","classList","add","innerHTML","clearCells","className","toggleMessage","toggle","newMoveState","isDobleCell","loseGameCheck","checkX","checkY","e","key","target","contains","then"],"mappings":"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","file":"main.fcc25d23.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst fieldCells = [...document.querySelectorAll('tr td')];\nconst pointsScrean = document.querySelector('.game-score');\nconst startButton = document.querySelector('.start');\n\nconst getRandom = (max) => Math.floor(Math.random() * max);\nconst isNoSlide = (array) => array.every(item => item === true);\nconst transpose = (arr) => arr[0].map((_, i) => arr.map(item => item[i]));\nconst setStates = (reverse, transposed) => (isStates = [reverse, transposed]);\nconst newBoard = Array(4).fill(Array(4).fill(0));\n\nlet board = newBoard.map(arr => arr.slice());\nlet isStates = [false, false];\nlet isWin = false;\nlet boardCheck = [];\nlet newCellCoord;\nlet scores = 0;\n\nconst direction = {\n  ArrowUp: () => setStates(false, true),\n  ArrowDown: () => setStates(true, true),\n  ArrowLeft: () => setStates(false, false),\n  ArrowRight: () => setStates(true, false),\n};\n\nconst winPromise = new Promise((resolve) => {\n  document.addEventListener('keydown', () => isWin && resolve('message-win'));\n});\n\nfunction slideResult(arr, arrayCheck) {\n  const row = arr.filter(i => i);\n  const newArr = [];\n  let merge;\n\n  while (row.length) {\n    if (row[0] === row[1]) {\n      merge = row.splice(0, 2).reduce((a, b) => a + b);\n      (!isWin && merge === 2048) && (isWin = true);\n      scores += merge;\n\n      newArr.push(merge);\n    } else {\n      newArr.push(row.splice(0, 1));\n    };\n  };\n\n  const result = [\n    ...newArr.flat(), ...Array(arr.length - newArr.length).fill(0),\n  ];\n\n  arrayCheck.push(result.map((item, i) => item === arr[i]).every(i => i));\n\n  return result;\n};\n\nfunction slideBoard() {\n  const arr = isStates[1] ? transpose(board) : board;\n  const result = isStates[0]\n    ? arr.map(row => slideResult(row.reverse(), boardCheck).reverse())\n    : arr.map(row => slideResult(row, boardCheck));\n\n  board = isStates[1] ? transpose(result) : result;\n};\n\nfunction newCell(array = board.flat()) {\n  const empty = array.map((item, i) => !item ? i : 0).filter(i => i);\n\n  if (!empty.length) {\n    return;\n  };\n\n  const random = empty[getRandom(empty.length)];\n\n  board[Math.floor(random / 4)][random % 4] = getRandom(10) > 9 ? 4 : 2;\n  newCellCoord = random;\n};\n\nfunction renderCells(array = board.flat()) {\n  fieldCells.forEach((item, i) => {\n    if (array[i]) {\n      item.classList.add(`field-cell--${array[i]}`);\n      item.innerHTML = `${array[i]}`;\n\n      if (newCellCoord === i) {\n        item.classList.add(`field-cell--new`);\n      };\n    };\n  });\n};\n\nfunction clearCells() {\n  fieldCells.map((item) => {\n    item.className = `field-cell`;\n    item.innerHTML = '';\n  });\n};\n\nfunction toggleMessage(result) {\n  document.querySelector(`.${result}`).classList.toggle('hidden');\n};\n\nfunction newMoveState(isDobleCell = false) {\n  pointsScrean.innerHTML = scores;\n  boardCheck = [];\n  clearCells();\n  newCell();\n  isDobleCell && newCell();\n  renderCells();\n  loseGameCheck();\n};\n\nfunction loseGameCheck(arr = board) {\n  if (arr.flat().filter(i => i).length !== 16) {\n    return;\n  };\n\n  const checkX = [];\n  const checkY = [];\n\n  arr.forEach(item => slideResult(item, checkX));\n  transpose(arr).forEach(item => slideResult(item, checkY));\n\n  if (isNoSlide(checkX) && isNoSlide(checkY)) {\n    toggleMessage('message-lose');\n  };\n};\n\ndocument.addEventListener('keydown', (e) => {\n  if (!direction[`${e.key}`]) {\n    return;\n  };\n\n  direction[`${e.key}`]();\n  slideBoard();\n\n  if (isNoSlide(boardCheck)) {\n    return;\n  };\n\n  newMoveState();\n});\n\nstartButton.addEventListener('click', (e) => {\n  if (e.target.classList.contains('start')) {\n    startButton.className = 'button restart';\n    startButton.innerHTML = 'Restart';\n    toggleMessage('message-start');\n  };\n\n  document.querySelector('.message-lose').classList.add('hidden');\n  board = newBoard.map(arr => arr.slice());\n  scores = 0;\n  newMoveState(true);\n});\n\nwinPromise.then(toggleMessage);\n"]}